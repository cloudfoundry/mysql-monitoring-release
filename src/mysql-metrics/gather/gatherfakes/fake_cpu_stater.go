// Code generated by counterfeiter. DO NOT EDIT.
package gatherfakes

import (
	"sync"

	"github.com/cloudfoundry/mysql-metrics/gather"
)

type FakeCpuStater struct {
	GetPercentageStub        func() (int, error)
	getPercentageMutex       sync.RWMutex
	getPercentageArgsForCall []struct {
	}
	getPercentageReturns struct {
		result1 int
		result2 error
	}
	getPercentageReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCpuStater) GetPercentage() (int, error) {
	fake.getPercentageMutex.Lock()
	ret, specificReturn := fake.getPercentageReturnsOnCall[len(fake.getPercentageArgsForCall)]
	fake.getPercentageArgsForCall = append(fake.getPercentageArgsForCall, struct {
	}{})
	stub := fake.GetPercentageStub
	fakeReturns := fake.getPercentageReturns
	fake.recordInvocation("GetPercentage", []interface{}{})
	fake.getPercentageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCpuStater) GetPercentageCallCount() int {
	fake.getPercentageMutex.RLock()
	defer fake.getPercentageMutex.RUnlock()
	return len(fake.getPercentageArgsForCall)
}

func (fake *FakeCpuStater) GetPercentageCalls(stub func() (int, error)) {
	fake.getPercentageMutex.Lock()
	defer fake.getPercentageMutex.Unlock()
	fake.GetPercentageStub = stub
}

func (fake *FakeCpuStater) GetPercentageReturns(result1 int, result2 error) {
	fake.getPercentageMutex.Lock()
	defer fake.getPercentageMutex.Unlock()
	fake.GetPercentageStub = nil
	fake.getPercentageReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCpuStater) GetPercentageReturnsOnCall(i int, result1 int, result2 error) {
	fake.getPercentageMutex.Lock()
	defer fake.getPercentageMutex.Unlock()
	fake.GetPercentageStub = nil
	if fake.getPercentageReturnsOnCall == nil {
		fake.getPercentageReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.getPercentageReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCpuStater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPercentageMutex.RLock()
	defer fake.getPercentageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCpuStater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gather.CpuStater = new(FakeCpuStater)
