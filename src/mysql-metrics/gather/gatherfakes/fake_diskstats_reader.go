// Code generated by counterfeiter. DO NOT EDIT.
package gatherfakes

import (
	"sync"

	"github.com/cloudfoundry/mysql-metrics/diskstat"
	"github.com/cloudfoundry/mysql-metrics/gather"
)

type FakeDiskstatsReader struct {
	SampleMultipleStub        func([]string) (map[string]diskstat.Delta, error)
	sampleMultipleMutex       sync.RWMutex
	sampleMultipleArgsForCall []struct {
		arg1 []string
	}
	sampleMultipleReturns struct {
		result1 map[string]diskstat.Delta
		result2 error
	}
	sampleMultipleReturnsOnCall map[int]struct {
		result1 map[string]diskstat.Delta
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiskstatsReader) SampleMultiple(arg1 []string) (map[string]diskstat.Delta, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.sampleMultipleMutex.Lock()
	ret, specificReturn := fake.sampleMultipleReturnsOnCall[len(fake.sampleMultipleArgsForCall)]
	fake.sampleMultipleArgsForCall = append(fake.sampleMultipleArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.SampleMultipleStub
	fakeReturns := fake.sampleMultipleReturns
	fake.recordInvocation("SampleMultiple", []interface{}{arg1Copy})
	fake.sampleMultipleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDiskstatsReader) SampleMultipleCallCount() int {
	fake.sampleMultipleMutex.RLock()
	defer fake.sampleMultipleMutex.RUnlock()
	return len(fake.sampleMultipleArgsForCall)
}

func (fake *FakeDiskstatsReader) SampleMultipleCalls(stub func([]string) (map[string]diskstat.Delta, error)) {
	fake.sampleMultipleMutex.Lock()
	defer fake.sampleMultipleMutex.Unlock()
	fake.SampleMultipleStub = stub
}

func (fake *FakeDiskstatsReader) SampleMultipleArgsForCall(i int) []string {
	fake.sampleMultipleMutex.RLock()
	defer fake.sampleMultipleMutex.RUnlock()
	argsForCall := fake.sampleMultipleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDiskstatsReader) SampleMultipleReturns(result1 map[string]diskstat.Delta, result2 error) {
	fake.sampleMultipleMutex.Lock()
	defer fake.sampleMultipleMutex.Unlock()
	fake.SampleMultipleStub = nil
	fake.sampleMultipleReturns = struct {
		result1 map[string]diskstat.Delta
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskstatsReader) SampleMultipleReturnsOnCall(i int, result1 map[string]diskstat.Delta, result2 error) {
	fake.sampleMultipleMutex.Lock()
	defer fake.sampleMultipleMutex.Unlock()
	fake.SampleMultipleStub = nil
	if fake.sampleMultipleReturnsOnCall == nil {
		fake.sampleMultipleReturnsOnCall = make(map[int]struct {
			result1 map[string]diskstat.Delta
			result2 error
		})
	}
	fake.sampleMultipleReturnsOnCall[i] = struct {
		result1 map[string]diskstat.Delta
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskstatsReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sampleMultipleMutex.RLock()
	defer fake.sampleMultipleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDiskstatsReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gather.DiskstatsReader = new(FakeDiskstatsReader)
