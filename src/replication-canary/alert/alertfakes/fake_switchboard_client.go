// Code generated by counterfeiter. DO NOT EDIT.
package alertfakes

import (
	"sync"

	"github.com/cloudfoundry/replication-canary/alert"
)

type FakeSwitchboardClient struct {
	DisableClusterTrafficStub        func() error
	disableClusterTrafficMutex       sync.RWMutex
	disableClusterTrafficArgsForCall []struct {
	}
	disableClusterTrafficReturns struct {
		result1 error
	}
	disableClusterTrafficReturnsOnCall map[int]struct {
		result1 error
	}
	EnableClusterTrafficStub        func() error
	enableClusterTrafficMutex       sync.RWMutex
	enableClusterTrafficArgsForCall []struct {
	}
	enableClusterTrafficReturns struct {
		result1 error
	}
	enableClusterTrafficReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSwitchboardClient) DisableClusterTraffic() error {
	fake.disableClusterTrafficMutex.Lock()
	ret, specificReturn := fake.disableClusterTrafficReturnsOnCall[len(fake.disableClusterTrafficArgsForCall)]
	fake.disableClusterTrafficArgsForCall = append(fake.disableClusterTrafficArgsForCall, struct {
	}{})
	stub := fake.DisableClusterTrafficStub
	fakeReturns := fake.disableClusterTrafficReturns
	fake.recordInvocation("DisableClusterTraffic", []interface{}{})
	fake.disableClusterTrafficMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSwitchboardClient) DisableClusterTrafficCallCount() int {
	fake.disableClusterTrafficMutex.RLock()
	defer fake.disableClusterTrafficMutex.RUnlock()
	return len(fake.disableClusterTrafficArgsForCall)
}

func (fake *FakeSwitchboardClient) DisableClusterTrafficCalls(stub func() error) {
	fake.disableClusterTrafficMutex.Lock()
	defer fake.disableClusterTrafficMutex.Unlock()
	fake.DisableClusterTrafficStub = stub
}

func (fake *FakeSwitchboardClient) DisableClusterTrafficReturns(result1 error) {
	fake.disableClusterTrafficMutex.Lock()
	defer fake.disableClusterTrafficMutex.Unlock()
	fake.DisableClusterTrafficStub = nil
	fake.disableClusterTrafficReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSwitchboardClient) DisableClusterTrafficReturnsOnCall(i int, result1 error) {
	fake.disableClusterTrafficMutex.Lock()
	defer fake.disableClusterTrafficMutex.Unlock()
	fake.DisableClusterTrafficStub = nil
	if fake.disableClusterTrafficReturnsOnCall == nil {
		fake.disableClusterTrafficReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableClusterTrafficReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSwitchboardClient) EnableClusterTraffic() error {
	fake.enableClusterTrafficMutex.Lock()
	ret, specificReturn := fake.enableClusterTrafficReturnsOnCall[len(fake.enableClusterTrafficArgsForCall)]
	fake.enableClusterTrafficArgsForCall = append(fake.enableClusterTrafficArgsForCall, struct {
	}{})
	stub := fake.EnableClusterTrafficStub
	fakeReturns := fake.enableClusterTrafficReturns
	fake.recordInvocation("EnableClusterTraffic", []interface{}{})
	fake.enableClusterTrafficMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSwitchboardClient) EnableClusterTrafficCallCount() int {
	fake.enableClusterTrafficMutex.RLock()
	defer fake.enableClusterTrafficMutex.RUnlock()
	return len(fake.enableClusterTrafficArgsForCall)
}

func (fake *FakeSwitchboardClient) EnableClusterTrafficCalls(stub func() error) {
	fake.enableClusterTrafficMutex.Lock()
	defer fake.enableClusterTrafficMutex.Unlock()
	fake.EnableClusterTrafficStub = stub
}

func (fake *FakeSwitchboardClient) EnableClusterTrafficReturns(result1 error) {
	fake.enableClusterTrafficMutex.Lock()
	defer fake.enableClusterTrafficMutex.Unlock()
	fake.EnableClusterTrafficStub = nil
	fake.enableClusterTrafficReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSwitchboardClient) EnableClusterTrafficReturnsOnCall(i int, result1 error) {
	fake.enableClusterTrafficMutex.Lock()
	defer fake.enableClusterTrafficMutex.Unlock()
	fake.EnableClusterTrafficStub = nil
	if fake.enableClusterTrafficReturnsOnCall == nil {
		fake.enableClusterTrafficReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableClusterTrafficReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSwitchboardClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableClusterTrafficMutex.RLock()
	defer fake.disableClusterTrafficMutex.RUnlock()
	fake.enableClusterTrafficMutex.RLock()
	defer fake.enableClusterTrafficMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSwitchboardClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ alert.SwitchboardClient = new(FakeSwitchboardClient)
