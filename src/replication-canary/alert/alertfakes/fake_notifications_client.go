// Code generated by counterfeiter. DO NOT EDIT.
package alertfakes

import (
	"sync"

	"github.com/cloudfoundry/replication-canary/alert"
)

type FakeNotificationsClient struct {
	EmailStub        func(string, string, string, string, string) error
	emailMutex       sync.RWMutex
	emailArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	emailReturns struct {
		result1 error
	}
	emailReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotificationsClient) Email(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string) error {
	fake.emailMutex.Lock()
	ret, specificReturn := fake.emailReturnsOnCall[len(fake.emailArgsForCall)]
	fake.emailArgsForCall = append(fake.emailArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.EmailStub
	fakeReturns := fake.emailReturns
	fake.recordInvocation("Email", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.emailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNotificationsClient) EmailCallCount() int {
	fake.emailMutex.RLock()
	defer fake.emailMutex.RUnlock()
	return len(fake.emailArgsForCall)
}

func (fake *FakeNotificationsClient) EmailCalls(stub func(string, string, string, string, string) error) {
	fake.emailMutex.Lock()
	defer fake.emailMutex.Unlock()
	fake.EmailStub = stub
}

func (fake *FakeNotificationsClient) EmailArgsForCall(i int) (string, string, string, string, string) {
	fake.emailMutex.RLock()
	defer fake.emailMutex.RUnlock()
	argsForCall := fake.emailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeNotificationsClient) EmailReturns(result1 error) {
	fake.emailMutex.Lock()
	defer fake.emailMutex.Unlock()
	fake.EmailStub = nil
	fake.emailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationsClient) EmailReturnsOnCall(i int, result1 error) {
	fake.emailMutex.Lock()
	defer fake.emailMutex.Unlock()
	fake.EmailStub = nil
	if fake.emailReturnsOnCall == nil {
		fake.emailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.emailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.emailMutex.RLock()
	defer fake.emailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotificationsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ alert.NotificationsClient = new(FakeNotificationsClient)
