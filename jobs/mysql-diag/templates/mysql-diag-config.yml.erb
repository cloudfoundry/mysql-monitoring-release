<%=

config = {
  mysql: {
    port: link('mysql').p(%w[port cf_mysql.mysql.port]),
    agent: {
      username: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.username'),
      password: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.password'),
      port: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.port'),
      tls: {
        enabled: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.tls.enabled'),
        ca: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.tls.ca'),
        server_name: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.tls.server_name'),
      },
    },
    threshold: {
      disk_used_warning_percent: 80,
      disk_inodes_used_warning_percent: 80
    },
    nodes: link('mysql').instances.map { |m|
      {
        host: m.address,
        name: m.name,
        uuid: m.id,
      }
    }
  }
}

if_link('galera-agent') do |link|
  config[:galera_agent] = {
    # recycle the same username/pw for basic auth, keeps the number of credentials down
    username: link.p('endpoint_username'),
    password: link.p('endpoint_password'),
    api_port: link.p('port'),
    tls: {
      enabled: link.p('endpoint_tls.enabled'),
      ca: link.p('endpoint_tls.ca'),
      server_name: link.p('endpoint_tls.server_name'),
    },
  }
end

if_link('proxy') do |link|
  proxies = link.instances.map do |instance|
    {
      username: link.p('api_username'),
      password: link.p('api_password'),
      host: instance.address,
      port: link.p('api_port'),
      backends_endpoint: 'v0/backends',
      name: "#{instance.name}/#{instance.id}",
      # this assumes a dev PXC release is created, with proxy job that provides:
      # - api_tls.enabled, job spec property already exists
      # - api_tls.ca, new property that needs to be created
      tls: {
        enabled: link.p('api_tls.enabled'),
        ca: link.p('api_tls.ca'),
        server_name: link.p('api_tls.server_name'),
      }
    }
  end

  config[:proxies] = proxies
end

if_p('db_username', 'db_password') do |db_username, db_password|
  config[:mysql][:username] = db_username
  config[:mysql][:password] = db_password
end

if config[:mysql][:username].nil? or config[:mysql][:password].nil?
 raise 'No database credentials were configured. db_username and db_password properties must be specified for the mysql-diag job.'
end

# JSON is valid yaml
JSON.pretty_generate(config)
%>
