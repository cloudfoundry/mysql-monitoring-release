<%=

config = {
  mysql: {
    username: link('replication-canary').p('mysql-monitoring.replication-canary.canary_username'),
    password: link('replication-canary').p('mysql-monitoring.replication-canary.canary_password'),
    port: link('mysql').p(['port','cf_mysql.mysql.port']),
    agent: {
      username: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.username'),
      password: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.password'),
      port: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.port'),
      tls: {
        enabled: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.tls.enabled'),
        ca: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.tls.ca'),
        server_name: link('mysql-diag-agent').p('mysql-monitoring.mysql-diag-agent.tls.server_name'),
      },
    },
    threshold: {
      disk_used_warning_percent: 80,
      disk_inodes_used_warning_percent: 80
    },
    nodes: link('mysql').instances.map { |m|
      {
        host: m.address,
        name: m.name,
        uuid: m.id,
      }
    }
  }
}

if_link('replication-canary') do |canary|
  config["canary"] = {
    # recycle the same username/pw for basic auth, keeps the number of credentials down
    username: canary.p('mysql-monitoring.replication-canary.canary_username'),
    password: canary.p('mysql-monitoring.replication-canary.canary_password'),
    api_port: canary.p('mysql-monitoring.replication-canary.api_port'),
    tls: {
      enabled: canary.p('mysql-monitoring.replication-canary.tls.enabled'),
      ca: canary.p('mysql-monitoring.replication-canary.tls.ca'),
      server_name: canary.p('mysql-monitoring.replication-canary.tls.server_name'),
    },
  }
end

# JSON is valid yaml
JSON.pretty_generate(config)
%>
