<%
  cluster_ips = nil
  mysql_port = nil
  if_link('mysql') do |mysql|
    cluster_ips = mysql.instances.map { |instance| instance.address }
    mysql_port = mysql.p(['port', 'cf_mysql.mysql.port'])
  end.else do
    # cluster_ips may contain nil values due to lack of flexibility in spiff
    cluster_ips = p('mysql-monitoring.replication-canary.cluster_ips').compact
    mysql_port = p('mysql-monitoring.replication-canary.mysql_port')
  end

  proxy_username = nil
  proxy_password = nil
  if_link('proxy') do |proxy|
    proxy_username = proxy.p(['api_username','cf_mysql.proxy.api_username'])
    proxy_password = proxy.p(['api_password','cf_mysql.proxy.api_password'])
  end.else do
    # cluster_ips may contain nil values due to lack of flexibility in spiff
    proxy_username = p('mysql-monitoring.replication-canary.switchboard_username')
    proxy_password = p('mysql-monitoring.replication-canary.switchboard_password')
  end

  def switchboard_urls
    if_link('proxy') do |proxy|
      proxy_count = proxy.instances.count
      if_p('cf_mysql.external_host') do |external_host|
         return proxy_count.times.map{ |i| "https://#{i}-proxy-#{external_host}" }
      end.else do
        api_port = proxy.p(['api_port','cf_mysql.proxy.api_port'])
        proxy_ips = proxy.instances.map { |instance| instance.address }
        return proxy_ips.map{ |proxy_ip| "http://#{proxy_ip}:#{api_port}" }
      end
    end.else do
      proxy_count = p('mysql-monitoring.replication-canary.switchboard_count')
      external_host = p('cf_mysql.external_host')
      proxy_count.times.map{ |i| "https://#{i}-proxy-#{external_host}" }
    end
  end

  poll_frequency = p('mysql-monitoring.replication-canary.poll_frequency')
  write_read_delay = p('mysql-monitoring.replication-canary.write_read_delay')

  # This is a duplicate validation as in the actual replication canary. It is here so that the job will
  # exit 1 at template evaluation time, not runtime, i.e. the deploy should fail before rolling the cluster.
  if write_read_delay >= poll_frequency
    raise 'Invalid configuration - poll_frequency should be greater than write_read_delay'
  end

  domain = ''
  if_link('cloud_controller') do |cc|
    domain = cc.p('system_domain')
  end.else do
    domain = p('domain')
  end
%>
---
NotifyOnly: <%= p('mysql-monitoring.notify_only') %>
WriteReadDelay: <%= write_read_delay %>
PollFrequency: <%= poll_frequency %>
MySQL:
  ClusterIPs: <%= cluster_ips %>
  Port: <%= mysql_port %>
  GaleraHealthcheckPort: 9200 # From cf-mysql-release/jobs/mysql/templates/galera_healthcheck_config.yaml.erb
Canary:
  Database: "<%= p('mysql-monitoring.replication-canary.canary_database') %>"
  Username: "<%= p('mysql-monitoring.replication-canary.canary_username') %>"
  Password: "<%= p('mysql-monitoring.replication-canary.canary_password') %>"
Notifications:
  AdminClientUsername: "<%= p('mysql-monitoring.replication-canary.uaa_admin_client_username') %>"
  AdminClientSecret: "<%= p('mysql-monitoring.replication-canary.uaa_admin_client_secret') %>"
  ClientUsername: "<%= p('mysql-monitoring.replication-canary.notifications_client_username') %>"
  ClientSecret: "<%= p('mysql-monitoring.replication-canary.notifications_client_secret') %>"
  NotificationsDomain: "notifications.<%= domain %>"
  UAADomain: "uaa.<%= domain %>"
  ToAddress: "<%= p('mysql-monitoring.recipient_email') %>"
  SystemDomain: "<%= domain %>"
  ClusterIdentifier: "<%= p('mysql-monitoring.cluster_identifier') %>"
Switchboard:
  URLs: <%= JSON.generate(switchboard_urls) %>
  Username: "<%= proxy_username %>"
  Password: "<%= proxy_password %>"
SkipSSLValidation: <%= p('cf.skip_ssl_validation') %>
BindAddress: "127.0.0.1"
APIPort: <%= p('mysql-monitoring.replication-canary.api_port') %>
TLS:
  Enabled: <%= p('mysql-monitoring.replication-canary.tls.enabled') %>
  Certificate: <%= JSON.generate(p('mysql-monitoring.replication-canary.tls.certificate')) %>
  PrivateKey: <%= JSON.generate(p('mysql-monitoring.replication-canary.tls.private_key')) %>